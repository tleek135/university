// Class: CSE 330
// Term: Fall 2015
// Instructor: George M. Georgiou
// Name: Kyle Lee
// Homework 2
// Problems: Ch. 5, #19; Ch. 6, #20; Ch. 7, #14;
// Ch. 8, #17

//Chapter 5, #19

int x = 6, y = 5, *px, *py;

(a) Write assignment statements that set px and py 
to point at integers x and y, respectively.
//Answer: px = &x;
//py = &y;

(b) Write output statment using px that prints the contents
of x. 
//Answer: cout << *px << endl;

(c) Write a statement using py that assigns 20 as the contents 
of y. 
//Answer: *py = 20;

(d) What is value of *py + *px?
//Answer: 20 + 6 = 26

(e) After executing *py = *px, are &x and py equal?
//Answer: no


//Chapter 6, #20

template <typename T>
void inList(list<T>& aList, const T& item)
{
	list<T>::iterator iter;
	iter = aList.begin();

	while (iter != aList.end()) {
		if (item == *iter)
			return;
		iter++;
	}

	aList.push_back(item);
}

(a) Assume that list<int> intL is originally empty. What are the contents
of this list after making six calls to inList() with data values 5 2 4 5 7 2?
//Answer: 5 2 4 7

(b) Assume that list<char> charL is originally empty. Call the function 11 times 
with the string "mississippi". What are the resulting elements in the list?
//Answer: m i s p

//Chapter 7, #14

List the elements on the stack after each operation:

stack<int> intStack;
int i;

intStack.push(8); //Elements: 8
intStack.push(5); //Elements: 5 8
intStack.push(3); //Elements: 3 5 8
intStack.push(intStack.top()); //Elements: 3 3 5 8
intStack.push(intStack.top() * 2); //Elements: 6 3 3 5 8
i = intStack.top(); //i = 6
intStack.pop(); //Elements: 3 3 5 8
intStack.push(2*i); //Elements: 12 3 3 5 8

//Chapter 8, #17

stack<int> s;
queue<int> q;
priority_queue<int> pq;

Assume that you input the integer sequence:
5 8 12 15 1 3 18 25 18 35 2 55
and insert each value into each container in the order given. What is the 
output of the following statements?

while (!s.empty()) {
	cout << setw(5) << s.top() << setw(5)
		 << q.front() << setw(5)
		 << pq.top() << endl;
	s.pop(); q.pop(); pq.pop();
}

//Answer: 
//   55    5   55
	  2    8   35
	 35   12   25
	 18   15   18
     25    1   18
	 18    3   15
      3   18   12
      1   25    8
     15   18    5
     12   35    3
      8    2    2
      5   55    1

